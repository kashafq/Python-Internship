{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a760020d-94d2-43a2-8136-85daabde83a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---< Welcome to API Data Fetcher & Exchange Rate Analyzer >---\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Do you want to enter a custom API URL? (y/n):  y\n",
      "Enter custom API URL:  https://api.exchangerate-api.com/v4/latest/USD\n",
      "Enter a filter keyword (e.g. EUR, PKR) or press Enter to skip:  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "---> Exchange Rate Report (Base: USD)\n",
      "-------------------------------------\n",
      "USD: 1\n",
      "AED: 3.67\n",
      "AFN: 68.49\n",
      "ALL: 83.7\n",
      "AMD: 384.06\n",
      "ANG: 1.79\n",
      "AOA: 919.34\n",
      "ARS: 1266.17\n",
      "AUD: 1.53\n",
      "AWG: 1.79\n",
      "AZN: 1.7\n",
      "BAM: 1.68\n",
      "BBD: 2\n",
      "BDT: 121.04\n",
      "BGN: 1.68\n",
      "BHD: 0.376\n",
      "BIF: 2968.78\n",
      "BMD: 1\n",
      "BND: 1.28\n",
      "BOB: 6.92\n",
      "BRL: 5.56\n",
      "BSD: 1\n",
      "BTN: 86.02\n",
      "BWP: 13.44\n",
      "BYN: 3.13\n",
      "BZD: 2\n",
      "CAD: 1.37\n",
      "CDF: 2887.79\n",
      "CHF: 0.797\n",
      "CLP: 955.63\n",
      "CNY: 7.17\n",
      "COP: 4008.36\n",
      "CRC: 504.51\n",
      "CUP: 24\n",
      "CVE: 94.46\n",
      "CZK: 21.14\n",
      "DJF: 177.72\n",
      "DKK: 6.39\n",
      "DOP: 60.21\n",
      "DZD: 129.86\n",
      "EGP: 49.46\n",
      "ERN: 15\n",
      "ETB: 136.29\n",
      "EUR: 0.857\n",
      "FJD: 2.25\n",
      "FKP: 0.744\n",
      "FOK: 6.39\n",
      "GBP: 0.744\n",
      "GEL: 2.71\n",
      "GGP: 0.744\n",
      "GHS: 10.83\n",
      "GIP: 0.744\n",
      "GMD: 72.78\n",
      "GNF: 8694.73\n",
      "GTQ: 7.68\n",
      "GYD: 209.18\n",
      "HKD: 7.85\n",
      "HNL: 26.18\n",
      "HRK: 6.45\n",
      "HTG: 131.21\n",
      "HUF: 342.56\n",
      "IDR: 16277.92\n",
      "ILS: 3.36\n",
      "IMP: 0.744\n",
      "INR: 86.02\n",
      "IQD: 1309.89\n",
      "IRR: 42439.26\n",
      "ISK: 121.94\n",
      "JEP: 0.744\n",
      "JMD: 160.01\n",
      "JOD: 0.709\n",
      "JPY: 147.61\n",
      "KES: 129.24\n",
      "KGS: 87.45\n",
      "KHR: 4015.76\n",
      "KID: 1.53\n",
      "KMF: 421.43\n",
      "KRW: 1380.98\n",
      "KWD: 0.305\n",
      "KYD: 0.833\n",
      "KZT: 524.07\n",
      "LAK: 21624.44\n",
      "LBP: 89500\n",
      "LKR: 300.62\n",
      "LRD: 200.49\n",
      "LSL: 17.91\n",
      "LYD: 5.39\n",
      "MAD: 9.01\n",
      "MDL: 16.92\n",
      "MGA: 4416.41\n",
      "MKD: 52.74\n",
      "MMK: 2101.4\n",
      "MNT: 3553.27\n",
      "MOP: 8.09\n",
      "MRU: 39.91\n",
      "MUR: 45.35\n",
      "MVR: 15.44\n",
      "MWK: 1743.46\n",
      "MXN: 18.73\n",
      "MYR: 4.25\n",
      "MZN: 63.69\n",
      "NAD: 17.91\n",
      "NGN: 1529.5\n",
      "NIO: 36.8\n",
      "NOK: 10.14\n",
      "NPR: 137.63\n",
      "NZD: 1.67\n",
      "OMR: 0.384\n",
      "PAB: 1\n",
      "PEN: 3.56\n",
      "PGK: 4.13\n",
      "PHP: 56.69\n",
      "PKR: 284.68\n",
      "PLN: 3.65\n",
      "PYG: 7827.75\n",
      "QAR: 3.64\n",
      "RON: 4.35\n",
      "RSD: 100.21\n",
      "RUB: 78.21\n",
      "RWF: 1448.59\n",
      "SAR: 3.75\n",
      "SBD: 8.26\n",
      "SCR: 14.46\n",
      "SDG: 453.87\n",
      "SEK: 9.61\n",
      "SGD: 1.28\n",
      "SHP: 0.744\n",
      "SLE: 22.45\n",
      "SLL: 22453.13\n",
      "SOS: 571.53\n",
      "SRD: 37.3\n",
      "SSP: 4715.55\n",
      "STN: 20.99\n",
      "SYP: 12902.26\n",
      "SZL: 17.91\n",
      "THB: 32.43\n",
      "TJS: 9.87\n",
      "TMT: 3.5\n",
      "TND: 2.89\n",
      "TOP: 2.38\n",
      "TRY: 40.24\n",
      "TTD: 6.76\n",
      "TVD: 1.53\n",
      "TWD: 29.27\n",
      "TZS: 2608.67\n",
      "UAH: 41.86\n",
      "UGX: 3586.05\n",
      "UYU: 40.57\n",
      "UZS: 12698.71\n",
      "VES: 115.84\n",
      "VND: 26057.92\n",
      "VUV: 118.99\n",
      "WST: 2.72\n",
      "XAF: 561.91\n",
      "XCD: 2.7\n",
      "XCG: 1.79\n",
      "XDR: 0.73\n",
      "XOF: 561.91\n",
      "XPF: 102.22\n",
      "YER: 241.74\n",
      "ZAR: 17.9\n",
      "ZMW: 23.35\n",
      "ZWL: 26.84\n",
      "+ Report saved to exchange_rate_report.txt\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import json\n",
    "\n",
    "def fetch_api_data(url):\n",
    "    try:\n",
    "        response = requests.get(url)\n",
    "        response.raise_for_status()\n",
    "        return response.json()\n",
    "    except requests.exceptions.RequestException as e:\n",
    "        print(f\"! Error fetching data: {e}\")\n",
    "        return None\n",
    "\n",
    "def extract_exchange_rates(data, keyword_filter=None):\n",
    "    try:\n",
    "        base_currency = data[\"base\"]\n",
    "        rates = data[\"rates\"]\n",
    "\n",
    "        report_lines = [f\"---> Exchange Rate Report (Base: {base_currency})\", \"-------------------------------------\"]\n",
    "        for currency, rate in rates.items():\n",
    "            if keyword_filter and keyword_filter.lower() not in currency.lower():\n",
    "                continue\n",
    "            report_lines.append(f\"{currency}: {rate}\")\n",
    "        return \"\\n\".join(report_lines)\n",
    "    except KeyError:\n",
    "        return \"! Unexpected JSON structure.\"\n",
    "\n",
    "def save_report(content, filename=\"btc_price_report.txt\"):\n",
    "    with open(filename, \"w\", encoding=\"utf-8\") as f:\n",
    "        f.write(content)\n",
    "    print(f\"+ Report saved to {filename}\")\n",
    "\n",
    "def main():\n",
    "    print(\"---< Welcome to API Data Fetcher & Exchange Rate Analyzer >---\\n\")\n",
    "    default_url = \"https://api.exchangerate-api.com/v4/latest/USD\"\n",
    "    use_custom = input(\"Do you want to enter a custom API URL? (y/n): \").lower()\n",
    "\n",
    "    if use_custom == 'y':\n",
    "        url = input(\"Enter custom API URL: \").strip()\n",
    "    else:\n",
    "        url = default_url\n",
    "\n",
    "    keyword = input(\"Enter a filter keyword (e.g. EUR, PKR) or press Enter to skip: \").strip()\n",
    "    keyword = keyword if keyword else None\n",
    "\n",
    "    data = fetch_api_data(url)\n",
    "    if data:\n",
    "        report = extract_exchange_rates(data, keyword)\n",
    "        print(\"\\n\" + report)\n",
    "        save_report(report)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ede1681-2d02-4d64-9ba3-a1b8d697b846",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c9d56fb-ff47-487a-8ac4-7bcbeabc0d70",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
